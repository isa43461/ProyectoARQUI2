// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/27/2019 23:14:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pruebaControl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pruebaControl_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pruebaControl_vlg_check_tst (
	aluOP,
	aluSrcA,
	aluSrcB,
	branch,
	IorD,
	IRwrite,
	memRead,
	memToReg,
	memWrite,
	PCsrc,
	pcWrite,
	regDst,
	regWrite,
	sampler_rx
);
input [2:0] aluOP;
input  aluSrcA;
input [1:0] aluSrcB;
input  branch;
input  IorD;
input  IRwrite;
input  memRead;
input  memToReg;
input  memWrite;
input [1:0] PCsrc;
input  pcWrite;
input  regDst;
input  regWrite;
input sampler_rx;

reg [2:0] aluOP_expected;
reg  aluSrcA_expected;
reg [1:0] aluSrcB_expected;
reg  branch_expected;
reg  IorD_expected;
reg  IRwrite_expected;
reg  memRead_expected;
reg  memToReg_expected;
reg  memWrite_expected;
reg [1:0] PCsrc_expected;
reg  pcWrite_expected;
reg  regDst_expected;
reg  regWrite_expected;

reg [2:0] aluOP_prev;
reg  aluSrcA_prev;
reg [1:0] aluSrcB_prev;
reg  branch_prev;
reg  IorD_prev;
reg  IRwrite_prev;
reg  memRead_prev;
reg  memToReg_prev;
reg  memWrite_prev;
reg [1:0] PCsrc_prev;
reg  pcWrite_prev;
reg  regDst_prev;
reg  regWrite_prev;

reg [2:0] aluOP_expected_prev;
reg  aluSrcA_expected_prev;
reg [1:0] aluSrcB_expected_prev;
reg  branch_expected_prev;
reg  IorD_expected_prev;
reg  IRwrite_expected_prev;
reg  memRead_expected_prev;
reg  memToReg_expected_prev;
reg  memWrite_expected_prev;
reg [1:0] PCsrc_expected_prev;
reg  pcWrite_expected_prev;
reg  regDst_expected_prev;
reg  regWrite_expected_prev;

reg [2:0] last_aluOP_exp;
reg  last_aluSrcA_exp;
reg [1:0] last_aluSrcB_exp;
reg  last_branch_exp;
reg  last_IorD_exp;
reg  last_IRwrite_exp;
reg  last_memRead_exp;
reg  last_memToReg_exp;
reg  last_memWrite_exp;
reg [1:0] last_PCsrc_exp;
reg  last_pcWrite_exp;
reg  last_regDst_exp;
reg  last_regWrite_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	aluOP_prev = aluOP;
	aluSrcA_prev = aluSrcA;
	aluSrcB_prev = aluSrcB;
	branch_prev = branch;
	IorD_prev = IorD;
	IRwrite_prev = IRwrite;
	memRead_prev = memRead;
	memToReg_prev = memToReg;
	memWrite_prev = memWrite;
	PCsrc_prev = PCsrc;
	pcWrite_prev = pcWrite;
	regDst_prev = regDst;
	regWrite_prev = regWrite;
end

// update expected /o prevs

always @(trigger)
begin
	aluOP_expected_prev = aluOP_expected;
	aluSrcA_expected_prev = aluSrcA_expected;
	aluSrcB_expected_prev = aluSrcB_expected;
	branch_expected_prev = branch_expected;
	IorD_expected_prev = IorD_expected;
	IRwrite_expected_prev = IRwrite_expected;
	memRead_expected_prev = memRead_expected;
	memToReg_expected_prev = memToReg_expected;
	memWrite_expected_prev = memWrite_expected;
	PCsrc_expected_prev = PCsrc_expected;
	pcWrite_expected_prev = pcWrite_expected;
	regDst_expected_prev = regDst_expected;
	regWrite_expected_prev = regWrite_expected;
end


// expected aluOP[ 2 ]
initial
begin
	aluOP_expected[2] = 1'bX;
end 
// expected aluOP[ 1 ]
initial
begin
	aluOP_expected[1] = 1'bX;
end 
// expected aluOP[ 0 ]
initial
begin
	aluOP_expected[0] = 1'bX;
end 

// expected aluSrcA
initial
begin
	aluSrcA_expected = 1'bX;
end 
// expected aluSrcB[ 1 ]
initial
begin
	aluSrcB_expected[1] = 1'bX;
end 
// expected aluSrcB[ 0 ]
initial
begin
	aluSrcB_expected[0] = 1'bX;
end 

// expected branch
initial
begin
	branch_expected = 1'bX;
end 

// expected IorD
initial
begin
	IorD_expected = 1'bX;
end 

// expected IRwrite
initial
begin
	IRwrite_expected = 1'bX;
end 

// expected memRead
initial
begin
	memRead_expected = 1'bX;
end 

// expected memToReg
initial
begin
	memToReg_expected = 1'bX;
end 

// expected memWrite
initial
begin
	memWrite_expected = 1'bX;
end 
// expected PCsrc[ 1 ]
initial
begin
	PCsrc_expected[1] = 1'bX;
end 
// expected PCsrc[ 0 ]
initial
begin
	PCsrc_expected[0] = 1'bX;
end 

// expected pcWrite
initial
begin
	pcWrite_expected = 1'bX;
end 

// expected regDst
initial
begin
	regDst_expected = 1'bX;
end 

// expected regWrite
initial
begin
	regWrite_expected = 1'bX;
end 
// generate trigger
always @(aluOP_expected or aluOP or aluSrcA_expected or aluSrcA or aluSrcB_expected or aluSrcB or branch_expected or branch or IorD_expected or IorD or IRwrite_expected or IRwrite or memRead_expected or memRead or memToReg_expected or memToReg or memWrite_expected or memWrite or PCsrc_expected or PCsrc or pcWrite_expected or pcWrite or regDst_expected or regDst or regWrite_expected or regWrite)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aluOP = %b | expected aluSrcA = %b | expected aluSrcB = %b | expected branch = %b | expected IorD = %b | expected IRwrite = %b | expected memRead = %b | expected memToReg = %b | expected memWrite = %b | expected PCsrc = %b | expected pcWrite = %b | expected regDst = %b | expected regWrite = %b | ",aluOP_expected_prev,aluSrcA_expected_prev,aluSrcB_expected_prev,branch_expected_prev,IorD_expected_prev,IRwrite_expected_prev,memRead_expected_prev,memToReg_expected_prev,memWrite_expected_prev,PCsrc_expected_prev,pcWrite_expected_prev,regDst_expected_prev,regWrite_expected_prev);
	$display("| real aluOP = %b | real aluSrcA = %b | real aluSrcB = %b | real branch = %b | real IorD = %b | real IRwrite = %b | real memRead = %b | real memToReg = %b | real memWrite = %b | real PCsrc = %b | real pcWrite = %b | real regDst = %b | real regWrite = %b | ",aluOP_prev,aluSrcA_prev,aluSrcB_prev,branch_prev,IorD_prev,IRwrite_prev,memRead_prev,memToReg_prev,memWrite_prev,PCsrc_prev,pcWrite_prev,regDst_prev,regWrite_prev);
`endif
	if (
		( aluOP_expected_prev[0] !== 1'bx ) && ( aluOP_prev[0] !== aluOP_expected_prev[0] )
		&& ((aluOP_expected_prev[0] !== last_aluOP_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOP_expected_prev);
		$display ("     Real value = %b", aluOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOP_exp[0] = aluOP_expected_prev[0];
	end
	if (
		( aluOP_expected_prev[1] !== 1'bx ) && ( aluOP_prev[1] !== aluOP_expected_prev[1] )
		&& ((aluOP_expected_prev[1] !== last_aluOP_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOP_expected_prev);
		$display ("     Real value = %b", aluOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOP_exp[1] = aluOP_expected_prev[1];
	end
	if (
		( aluOP_expected_prev[2] !== 1'bx ) && ( aluOP_prev[2] !== aluOP_expected_prev[2] )
		&& ((aluOP_expected_prev[2] !== last_aluOP_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOP_expected_prev);
		$display ("     Real value = %b", aluOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOP_exp[2] = aluOP_expected_prev[2];
	end
	if (
		( aluSrcA_expected_prev !== 1'bx ) && ( aluSrcA_prev !== aluSrcA_expected_prev )
		&& ((aluSrcA_expected_prev !== last_aluSrcA_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluSrcA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluSrcA_expected_prev);
		$display ("     Real value = %b", aluSrcA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluSrcA_exp = aluSrcA_expected_prev;
	end
	if (
		( aluSrcB_expected_prev[0] !== 1'bx ) && ( aluSrcB_prev[0] !== aluSrcB_expected_prev[0] )
		&& ((aluSrcB_expected_prev[0] !== last_aluSrcB_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluSrcB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluSrcB_expected_prev);
		$display ("     Real value = %b", aluSrcB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluSrcB_exp[0] = aluSrcB_expected_prev[0];
	end
	if (
		( aluSrcB_expected_prev[1] !== 1'bx ) && ( aluSrcB_prev[1] !== aluSrcB_expected_prev[1] )
		&& ((aluSrcB_expected_prev[1] !== last_aluSrcB_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluSrcB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluSrcB_expected_prev);
		$display ("     Real value = %b", aluSrcB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluSrcB_exp[1] = aluSrcB_expected_prev[1];
	end
	if (
		( branch_expected_prev !== 1'bx ) && ( branch_prev !== branch_expected_prev )
		&& ((branch_expected_prev !== last_branch_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_expected_prev);
		$display ("     Real value = %b", branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_branch_exp = branch_expected_prev;
	end
	if (
		( IorD_expected_prev !== 1'bx ) && ( IorD_prev !== IorD_expected_prev )
		&& ((IorD_expected_prev !== last_IorD_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IorD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IorD_expected_prev);
		$display ("     Real value = %b", IorD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IorD_exp = IorD_expected_prev;
	end
	if (
		( IRwrite_expected_prev !== 1'bx ) && ( IRwrite_prev !== IRwrite_expected_prev )
		&& ((IRwrite_expected_prev !== last_IRwrite_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IRwrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IRwrite_expected_prev);
		$display ("     Real value = %b", IRwrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IRwrite_exp = IRwrite_expected_prev;
	end
	if (
		( memRead_expected_prev !== 1'bx ) && ( memRead_prev !== memRead_expected_prev )
		&& ((memRead_expected_prev !== last_memRead_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memRead :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memRead_expected_prev);
		$display ("     Real value = %b", memRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_memRead_exp = memRead_expected_prev;
	end
	if (
		( memToReg_expected_prev !== 1'bx ) && ( memToReg_prev !== memToReg_expected_prev )
		&& ((memToReg_expected_prev !== last_memToReg_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memToReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memToReg_expected_prev);
		$display ("     Real value = %b", memToReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_memToReg_exp = memToReg_expected_prev;
	end
	if (
		( memWrite_expected_prev !== 1'bx ) && ( memWrite_prev !== memWrite_expected_prev )
		&& ((memWrite_expected_prev !== last_memWrite_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memWrite_expected_prev);
		$display ("     Real value = %b", memWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_memWrite_exp = memWrite_expected_prev;
	end
	if (
		( PCsrc_expected_prev[0] !== 1'bx ) && ( PCsrc_prev[0] !== PCsrc_expected_prev[0] )
		&& ((PCsrc_expected_prev[0] !== last_PCsrc_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCsrc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCsrc_expected_prev);
		$display ("     Real value = %b", PCsrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PCsrc_exp[0] = PCsrc_expected_prev[0];
	end
	if (
		( PCsrc_expected_prev[1] !== 1'bx ) && ( PCsrc_prev[1] !== PCsrc_expected_prev[1] )
		&& ((PCsrc_expected_prev[1] !== last_PCsrc_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCsrc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCsrc_expected_prev);
		$display ("     Real value = %b", PCsrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PCsrc_exp[1] = PCsrc_expected_prev[1];
	end
	if (
		( pcWrite_expected_prev !== 1'bx ) && ( pcWrite_prev !== pcWrite_expected_prev )
		&& ((pcWrite_expected_prev !== last_pcWrite_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcWrite_expected_prev);
		$display ("     Real value = %b", pcWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pcWrite_exp = pcWrite_expected_prev;
	end
	if (
		( regDst_expected_prev !== 1'bx ) && ( regDst_prev !== regDst_expected_prev )
		&& ((regDst_expected_prev !== last_regDst_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regDst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regDst_expected_prev);
		$display ("     Real value = %b", regDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_regDst_exp = regDst_expected_prev;
	end
	if (
		( regWrite_expected_prev !== 1'bx ) && ( regWrite_prev !== regWrite_expected_prev )
		&& ((regWrite_expected_prev !== last_regWrite_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regWrite_expected_prev);
		$display ("     Real value = %b", regWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_regWrite_exp = regWrite_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pruebaControl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [2:0] aluOP;
wire aluSrcA;
wire [1:0] aluSrcB;
wire branch;
wire IorD;
wire IRwrite;
wire memRead;
wire memToReg;
wire memWrite;
wire [1:0] PCsrc;
wire pcWrite;
wire regDst;
wire regWrite;

wire sampler;                             

// assign statements (if any)                          
pruebaControl i1 (
// port map - connection between master ports and signals/registers   
	.aluOP(aluOP),
	.aluSrcA(aluSrcA),
	.aluSrcB(aluSrcB),
	.branch(branch),
	.clk(clk),
	.IorD(IorD),
	.IRwrite(IRwrite),
	.memRead(memRead),
	.memToReg(memToReg),
	.memWrite(memWrite),
	.PCsrc(PCsrc),
	.pcWrite(pcWrite),
	.regDst(regDst),
	.regWrite(regWrite)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

pruebaControl_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

pruebaControl_vlg_check_tst tb_out(
	.aluOP(aluOP),
	.aluSrcA(aluSrcA),
	.aluSrcB(aluSrcB),
	.branch(branch),
	.IorD(IorD),
	.IRwrite(IRwrite),
	.memRead(memRead),
	.memToReg(memToReg),
	.memWrite(memWrite),
	.PCsrc(PCsrc),
	.pcWrite(pcWrite),
	.regDst(regDst),
	.regWrite(regWrite),
	.sampler_rx(sampler)
);
endmodule

