// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2019 22:47:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegFile_vlg_sample_tst(
	clk,
	Dato,
	RD,
	regWriteSignal,
	RS,
	RT,
	sampler_tx
);
input  clk;
input [31:0] Dato;
input [4:0] RD;
input  regWriteSignal;
input [4:0] RS;
input [4:0] RT;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Dato or RD or regWriteSignal or RS or RT)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegFile_vlg_check_tst (
	regA,
	regB,
	sampler_rx
);
input [31:0] regA;
input [31:0] regB;
input sampler_rx;

reg [31:0] regA_expected;
reg [31:0] regB_expected;

reg [31:0] regA_prev;
reg [31:0] regB_prev;

reg [31:0] regA_expected_prev;
reg [31:0] regB_expected_prev;

reg [31:0] last_regA_exp;
reg [31:0] last_regB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	regA_prev = regA;
	regB_prev = regB;
end

// update expected /o prevs

always @(trigger)
begin
	regA_expected_prev = regA_expected;
	regB_expected_prev = regB_expected;
end


// expected regA[ 31 ]
initial
begin
	regA_expected[31] = 1'bX;
end 
// expected regA[ 30 ]
initial
begin
	regA_expected[30] = 1'bX;
end 
// expected regA[ 29 ]
initial
begin
	regA_expected[29] = 1'bX;
end 
// expected regA[ 28 ]
initial
begin
	regA_expected[28] = 1'bX;
end 
// expected regA[ 27 ]
initial
begin
	regA_expected[27] = 1'bX;
end 
// expected regA[ 26 ]
initial
begin
	regA_expected[26] = 1'bX;
end 
// expected regA[ 25 ]
initial
begin
	regA_expected[25] = 1'bX;
end 
// expected regA[ 24 ]
initial
begin
	regA_expected[24] = 1'bX;
end 
// expected regA[ 23 ]
initial
begin
	regA_expected[23] = 1'bX;
end 
// expected regA[ 22 ]
initial
begin
	regA_expected[22] = 1'bX;
end 
// expected regA[ 21 ]
initial
begin
	regA_expected[21] = 1'bX;
end 
// expected regA[ 20 ]
initial
begin
	regA_expected[20] = 1'bX;
end 
// expected regA[ 19 ]
initial
begin
	regA_expected[19] = 1'bX;
end 
// expected regA[ 18 ]
initial
begin
	regA_expected[18] = 1'bX;
end 
// expected regA[ 17 ]
initial
begin
	regA_expected[17] = 1'bX;
end 
// expected regA[ 16 ]
initial
begin
	regA_expected[16] = 1'bX;
end 
// expected regA[ 15 ]
initial
begin
	regA_expected[15] = 1'bX;
end 
// expected regA[ 14 ]
initial
begin
	regA_expected[14] = 1'bX;
end 
// expected regA[ 13 ]
initial
begin
	regA_expected[13] = 1'bX;
end 
// expected regA[ 12 ]
initial
begin
	regA_expected[12] = 1'bX;
end 
// expected regA[ 11 ]
initial
begin
	regA_expected[11] = 1'bX;
end 
// expected regA[ 10 ]
initial
begin
	regA_expected[10] = 1'bX;
end 
// expected regA[ 9 ]
initial
begin
	regA_expected[9] = 1'bX;
end 
// expected regA[ 8 ]
initial
begin
	regA_expected[8] = 1'bX;
end 
// expected regA[ 7 ]
initial
begin
	regA_expected[7] = 1'bX;
end 
// expected regA[ 6 ]
initial
begin
	regA_expected[6] = 1'bX;
end 
// expected regA[ 5 ]
initial
begin
	regA_expected[5] = 1'bX;
end 
// expected regA[ 4 ]
initial
begin
	regA_expected[4] = 1'bX;
end 
// expected regA[ 3 ]
initial
begin
	regA_expected[3] = 1'bX;
end 
// expected regA[ 2 ]
initial
begin
	regA_expected[2] = 1'bX;
end 
// expected regA[ 1 ]
initial
begin
	regA_expected[1] = 1'bX;
end 
// expected regA[ 0 ]
initial
begin
	regA_expected[0] = 1'bX;
end 
// expected regB[ 31 ]
initial
begin
	regB_expected[31] = 1'bX;
end 
// expected regB[ 30 ]
initial
begin
	regB_expected[30] = 1'bX;
end 
// expected regB[ 29 ]
initial
begin
	regB_expected[29] = 1'bX;
end 
// expected regB[ 28 ]
initial
begin
	regB_expected[28] = 1'bX;
end 
// expected regB[ 27 ]
initial
begin
	regB_expected[27] = 1'bX;
end 
// expected regB[ 26 ]
initial
begin
	regB_expected[26] = 1'bX;
end 
// expected regB[ 25 ]
initial
begin
	regB_expected[25] = 1'bX;
end 
// expected regB[ 24 ]
initial
begin
	regB_expected[24] = 1'bX;
end 
// expected regB[ 23 ]
initial
begin
	regB_expected[23] = 1'bX;
end 
// expected regB[ 22 ]
initial
begin
	regB_expected[22] = 1'bX;
end 
// expected regB[ 21 ]
initial
begin
	regB_expected[21] = 1'bX;
end 
// expected regB[ 20 ]
initial
begin
	regB_expected[20] = 1'bX;
end 
// expected regB[ 19 ]
initial
begin
	regB_expected[19] = 1'bX;
end 
// expected regB[ 18 ]
initial
begin
	regB_expected[18] = 1'bX;
end 
// expected regB[ 17 ]
initial
begin
	regB_expected[17] = 1'bX;
end 
// expected regB[ 16 ]
initial
begin
	regB_expected[16] = 1'bX;
end 
// expected regB[ 15 ]
initial
begin
	regB_expected[15] = 1'bX;
end 
// expected regB[ 14 ]
initial
begin
	regB_expected[14] = 1'bX;
end 
// expected regB[ 13 ]
initial
begin
	regB_expected[13] = 1'bX;
end 
// expected regB[ 12 ]
initial
begin
	regB_expected[12] = 1'bX;
end 
// expected regB[ 11 ]
initial
begin
	regB_expected[11] = 1'bX;
end 
// expected regB[ 10 ]
initial
begin
	regB_expected[10] = 1'bX;
end 
// expected regB[ 9 ]
initial
begin
	regB_expected[9] = 1'bX;
end 
// expected regB[ 8 ]
initial
begin
	regB_expected[8] = 1'bX;
end 
// expected regB[ 7 ]
initial
begin
	regB_expected[7] = 1'bX;
end 
// expected regB[ 6 ]
initial
begin
	regB_expected[6] = 1'bX;
end 
// expected regB[ 5 ]
initial
begin
	regB_expected[5] = 1'bX;
end 
// expected regB[ 4 ]
initial
begin
	regB_expected[4] = 1'bX;
end 
// expected regB[ 3 ]
initial
begin
	regB_expected[3] = 1'bX;
end 
// expected regB[ 2 ]
initial
begin
	regB_expected[2] = 1'bX;
end 
// expected regB[ 1 ]
initial
begin
	regB_expected[1] = 1'bX;
end 
// expected regB[ 0 ]
initial
begin
	regB_expected[0] = 1'bX;
end 
// generate trigger
always @(regA_expected or regA or regB_expected or regB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected regA = %b | expected regB = %b | ",regA_expected_prev,regB_expected_prev);
	$display("| real regA = %b | real regB = %b | ",regA_prev,regB_prev);
`endif
	if (
		( regA_expected_prev[0] !== 1'bx ) && ( regA_prev[0] !== regA_expected_prev[0] )
		&& ((regA_expected_prev[0] !== last_regA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[0] = regA_expected_prev[0];
	end
	if (
		( regA_expected_prev[1] !== 1'bx ) && ( regA_prev[1] !== regA_expected_prev[1] )
		&& ((regA_expected_prev[1] !== last_regA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[1] = regA_expected_prev[1];
	end
	if (
		( regA_expected_prev[2] !== 1'bx ) && ( regA_prev[2] !== regA_expected_prev[2] )
		&& ((regA_expected_prev[2] !== last_regA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[2] = regA_expected_prev[2];
	end
	if (
		( regA_expected_prev[3] !== 1'bx ) && ( regA_prev[3] !== regA_expected_prev[3] )
		&& ((regA_expected_prev[3] !== last_regA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[3] = regA_expected_prev[3];
	end
	if (
		( regA_expected_prev[4] !== 1'bx ) && ( regA_prev[4] !== regA_expected_prev[4] )
		&& ((regA_expected_prev[4] !== last_regA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[4] = regA_expected_prev[4];
	end
	if (
		( regA_expected_prev[5] !== 1'bx ) && ( regA_prev[5] !== regA_expected_prev[5] )
		&& ((regA_expected_prev[5] !== last_regA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[5] = regA_expected_prev[5];
	end
	if (
		( regA_expected_prev[6] !== 1'bx ) && ( regA_prev[6] !== regA_expected_prev[6] )
		&& ((regA_expected_prev[6] !== last_regA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[6] = regA_expected_prev[6];
	end
	if (
		( regA_expected_prev[7] !== 1'bx ) && ( regA_prev[7] !== regA_expected_prev[7] )
		&& ((regA_expected_prev[7] !== last_regA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[7] = regA_expected_prev[7];
	end
	if (
		( regA_expected_prev[8] !== 1'bx ) && ( regA_prev[8] !== regA_expected_prev[8] )
		&& ((regA_expected_prev[8] !== last_regA_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[8] = regA_expected_prev[8];
	end
	if (
		( regA_expected_prev[9] !== 1'bx ) && ( regA_prev[9] !== regA_expected_prev[9] )
		&& ((regA_expected_prev[9] !== last_regA_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[9] = regA_expected_prev[9];
	end
	if (
		( regA_expected_prev[10] !== 1'bx ) && ( regA_prev[10] !== regA_expected_prev[10] )
		&& ((regA_expected_prev[10] !== last_regA_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[10] = regA_expected_prev[10];
	end
	if (
		( regA_expected_prev[11] !== 1'bx ) && ( regA_prev[11] !== regA_expected_prev[11] )
		&& ((regA_expected_prev[11] !== last_regA_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[11] = regA_expected_prev[11];
	end
	if (
		( regA_expected_prev[12] !== 1'bx ) && ( regA_prev[12] !== regA_expected_prev[12] )
		&& ((regA_expected_prev[12] !== last_regA_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[12] = regA_expected_prev[12];
	end
	if (
		( regA_expected_prev[13] !== 1'bx ) && ( regA_prev[13] !== regA_expected_prev[13] )
		&& ((regA_expected_prev[13] !== last_regA_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[13] = regA_expected_prev[13];
	end
	if (
		( regA_expected_prev[14] !== 1'bx ) && ( regA_prev[14] !== regA_expected_prev[14] )
		&& ((regA_expected_prev[14] !== last_regA_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[14] = regA_expected_prev[14];
	end
	if (
		( regA_expected_prev[15] !== 1'bx ) && ( regA_prev[15] !== regA_expected_prev[15] )
		&& ((regA_expected_prev[15] !== last_regA_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[15] = regA_expected_prev[15];
	end
	if (
		( regA_expected_prev[16] !== 1'bx ) && ( regA_prev[16] !== regA_expected_prev[16] )
		&& ((regA_expected_prev[16] !== last_regA_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[16] = regA_expected_prev[16];
	end
	if (
		( regA_expected_prev[17] !== 1'bx ) && ( regA_prev[17] !== regA_expected_prev[17] )
		&& ((regA_expected_prev[17] !== last_regA_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[17] = regA_expected_prev[17];
	end
	if (
		( regA_expected_prev[18] !== 1'bx ) && ( regA_prev[18] !== regA_expected_prev[18] )
		&& ((regA_expected_prev[18] !== last_regA_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[18] = regA_expected_prev[18];
	end
	if (
		( regA_expected_prev[19] !== 1'bx ) && ( regA_prev[19] !== regA_expected_prev[19] )
		&& ((regA_expected_prev[19] !== last_regA_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[19] = regA_expected_prev[19];
	end
	if (
		( regA_expected_prev[20] !== 1'bx ) && ( regA_prev[20] !== regA_expected_prev[20] )
		&& ((regA_expected_prev[20] !== last_regA_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[20] = regA_expected_prev[20];
	end
	if (
		( regA_expected_prev[21] !== 1'bx ) && ( regA_prev[21] !== regA_expected_prev[21] )
		&& ((regA_expected_prev[21] !== last_regA_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[21] = regA_expected_prev[21];
	end
	if (
		( regA_expected_prev[22] !== 1'bx ) && ( regA_prev[22] !== regA_expected_prev[22] )
		&& ((regA_expected_prev[22] !== last_regA_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[22] = regA_expected_prev[22];
	end
	if (
		( regA_expected_prev[23] !== 1'bx ) && ( regA_prev[23] !== regA_expected_prev[23] )
		&& ((regA_expected_prev[23] !== last_regA_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[23] = regA_expected_prev[23];
	end
	if (
		( regA_expected_prev[24] !== 1'bx ) && ( regA_prev[24] !== regA_expected_prev[24] )
		&& ((regA_expected_prev[24] !== last_regA_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[24] = regA_expected_prev[24];
	end
	if (
		( regA_expected_prev[25] !== 1'bx ) && ( regA_prev[25] !== regA_expected_prev[25] )
		&& ((regA_expected_prev[25] !== last_regA_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[25] = regA_expected_prev[25];
	end
	if (
		( regA_expected_prev[26] !== 1'bx ) && ( regA_prev[26] !== regA_expected_prev[26] )
		&& ((regA_expected_prev[26] !== last_regA_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[26] = regA_expected_prev[26];
	end
	if (
		( regA_expected_prev[27] !== 1'bx ) && ( regA_prev[27] !== regA_expected_prev[27] )
		&& ((regA_expected_prev[27] !== last_regA_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[27] = regA_expected_prev[27];
	end
	if (
		( regA_expected_prev[28] !== 1'bx ) && ( regA_prev[28] !== regA_expected_prev[28] )
		&& ((regA_expected_prev[28] !== last_regA_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[28] = regA_expected_prev[28];
	end
	if (
		( regA_expected_prev[29] !== 1'bx ) && ( regA_prev[29] !== regA_expected_prev[29] )
		&& ((regA_expected_prev[29] !== last_regA_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[29] = regA_expected_prev[29];
	end
	if (
		( regA_expected_prev[30] !== 1'bx ) && ( regA_prev[30] !== regA_expected_prev[30] )
		&& ((regA_expected_prev[30] !== last_regA_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[30] = regA_expected_prev[30];
	end
	if (
		( regA_expected_prev[31] !== 1'bx ) && ( regA_prev[31] !== regA_expected_prev[31] )
		&& ((regA_expected_prev[31] !== last_regA_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_regA_exp[31] = regA_expected_prev[31];
	end
	if (
		( regB_expected_prev[0] !== 1'bx ) && ( regB_prev[0] !== regB_expected_prev[0] )
		&& ((regB_expected_prev[0] !== last_regB_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[0] = regB_expected_prev[0];
	end
	if (
		( regB_expected_prev[1] !== 1'bx ) && ( regB_prev[1] !== regB_expected_prev[1] )
		&& ((regB_expected_prev[1] !== last_regB_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[1] = regB_expected_prev[1];
	end
	if (
		( regB_expected_prev[2] !== 1'bx ) && ( regB_prev[2] !== regB_expected_prev[2] )
		&& ((regB_expected_prev[2] !== last_regB_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[2] = regB_expected_prev[2];
	end
	if (
		( regB_expected_prev[3] !== 1'bx ) && ( regB_prev[3] !== regB_expected_prev[3] )
		&& ((regB_expected_prev[3] !== last_regB_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[3] = regB_expected_prev[3];
	end
	if (
		( regB_expected_prev[4] !== 1'bx ) && ( regB_prev[4] !== regB_expected_prev[4] )
		&& ((regB_expected_prev[4] !== last_regB_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[4] = regB_expected_prev[4];
	end
	if (
		( regB_expected_prev[5] !== 1'bx ) && ( regB_prev[5] !== regB_expected_prev[5] )
		&& ((regB_expected_prev[5] !== last_regB_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[5] = regB_expected_prev[5];
	end
	if (
		( regB_expected_prev[6] !== 1'bx ) && ( regB_prev[6] !== regB_expected_prev[6] )
		&& ((regB_expected_prev[6] !== last_regB_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[6] = regB_expected_prev[6];
	end
	if (
		( regB_expected_prev[7] !== 1'bx ) && ( regB_prev[7] !== regB_expected_prev[7] )
		&& ((regB_expected_prev[7] !== last_regB_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[7] = regB_expected_prev[7];
	end
	if (
		( regB_expected_prev[8] !== 1'bx ) && ( regB_prev[8] !== regB_expected_prev[8] )
		&& ((regB_expected_prev[8] !== last_regB_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[8] = regB_expected_prev[8];
	end
	if (
		( regB_expected_prev[9] !== 1'bx ) && ( regB_prev[9] !== regB_expected_prev[9] )
		&& ((regB_expected_prev[9] !== last_regB_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[9] = regB_expected_prev[9];
	end
	if (
		( regB_expected_prev[10] !== 1'bx ) && ( regB_prev[10] !== regB_expected_prev[10] )
		&& ((regB_expected_prev[10] !== last_regB_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[10] = regB_expected_prev[10];
	end
	if (
		( regB_expected_prev[11] !== 1'bx ) && ( regB_prev[11] !== regB_expected_prev[11] )
		&& ((regB_expected_prev[11] !== last_regB_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[11] = regB_expected_prev[11];
	end
	if (
		( regB_expected_prev[12] !== 1'bx ) && ( regB_prev[12] !== regB_expected_prev[12] )
		&& ((regB_expected_prev[12] !== last_regB_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[12] = regB_expected_prev[12];
	end
	if (
		( regB_expected_prev[13] !== 1'bx ) && ( regB_prev[13] !== regB_expected_prev[13] )
		&& ((regB_expected_prev[13] !== last_regB_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[13] = regB_expected_prev[13];
	end
	if (
		( regB_expected_prev[14] !== 1'bx ) && ( regB_prev[14] !== regB_expected_prev[14] )
		&& ((regB_expected_prev[14] !== last_regB_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[14] = regB_expected_prev[14];
	end
	if (
		( regB_expected_prev[15] !== 1'bx ) && ( regB_prev[15] !== regB_expected_prev[15] )
		&& ((regB_expected_prev[15] !== last_regB_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[15] = regB_expected_prev[15];
	end
	if (
		( regB_expected_prev[16] !== 1'bx ) && ( regB_prev[16] !== regB_expected_prev[16] )
		&& ((regB_expected_prev[16] !== last_regB_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[16] = regB_expected_prev[16];
	end
	if (
		( regB_expected_prev[17] !== 1'bx ) && ( regB_prev[17] !== regB_expected_prev[17] )
		&& ((regB_expected_prev[17] !== last_regB_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[17] = regB_expected_prev[17];
	end
	if (
		( regB_expected_prev[18] !== 1'bx ) && ( regB_prev[18] !== regB_expected_prev[18] )
		&& ((regB_expected_prev[18] !== last_regB_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[18] = regB_expected_prev[18];
	end
	if (
		( regB_expected_prev[19] !== 1'bx ) && ( regB_prev[19] !== regB_expected_prev[19] )
		&& ((regB_expected_prev[19] !== last_regB_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[19] = regB_expected_prev[19];
	end
	if (
		( regB_expected_prev[20] !== 1'bx ) && ( regB_prev[20] !== regB_expected_prev[20] )
		&& ((regB_expected_prev[20] !== last_regB_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[20] = regB_expected_prev[20];
	end
	if (
		( regB_expected_prev[21] !== 1'bx ) && ( regB_prev[21] !== regB_expected_prev[21] )
		&& ((regB_expected_prev[21] !== last_regB_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[21] = regB_expected_prev[21];
	end
	if (
		( regB_expected_prev[22] !== 1'bx ) && ( regB_prev[22] !== regB_expected_prev[22] )
		&& ((regB_expected_prev[22] !== last_regB_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[22] = regB_expected_prev[22];
	end
	if (
		( regB_expected_prev[23] !== 1'bx ) && ( regB_prev[23] !== regB_expected_prev[23] )
		&& ((regB_expected_prev[23] !== last_regB_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[23] = regB_expected_prev[23];
	end
	if (
		( regB_expected_prev[24] !== 1'bx ) && ( regB_prev[24] !== regB_expected_prev[24] )
		&& ((regB_expected_prev[24] !== last_regB_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[24] = regB_expected_prev[24];
	end
	if (
		( regB_expected_prev[25] !== 1'bx ) && ( regB_prev[25] !== regB_expected_prev[25] )
		&& ((regB_expected_prev[25] !== last_regB_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[25] = regB_expected_prev[25];
	end
	if (
		( regB_expected_prev[26] !== 1'bx ) && ( regB_prev[26] !== regB_expected_prev[26] )
		&& ((regB_expected_prev[26] !== last_regB_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[26] = regB_expected_prev[26];
	end
	if (
		( regB_expected_prev[27] !== 1'bx ) && ( regB_prev[27] !== regB_expected_prev[27] )
		&& ((regB_expected_prev[27] !== last_regB_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[27] = regB_expected_prev[27];
	end
	if (
		( regB_expected_prev[28] !== 1'bx ) && ( regB_prev[28] !== regB_expected_prev[28] )
		&& ((regB_expected_prev[28] !== last_regB_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[28] = regB_expected_prev[28];
	end
	if (
		( regB_expected_prev[29] !== 1'bx ) && ( regB_prev[29] !== regB_expected_prev[29] )
		&& ((regB_expected_prev[29] !== last_regB_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[29] = regB_expected_prev[29];
	end
	if (
		( regB_expected_prev[30] !== 1'bx ) && ( regB_prev[30] !== regB_expected_prev[30] )
		&& ((regB_expected_prev[30] !== last_regB_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[30] = regB_expected_prev[30];
	end
	if (
		( regB_expected_prev[31] !== 1'bx ) && ( regB_prev[31] !== regB_expected_prev[31] )
		&& ((regB_expected_prev[31] !== last_regB_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_regB_exp[31] = regB_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [31:0] Dato;
reg [4:0] RD;
reg regWriteSignal;
reg [4:0] RS;
reg [4:0] RT;
// wires                                               
wire [31:0] regA;
wire [31:0] regB;

wire sampler;                             

// assign statements (if any)                          
RegFile i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Dato(Dato),
	.RD(RD),
	.regA(regA),
	.regB(regB),
	.regWriteSignal(regWriteSignal),
	.RS(RS),
	.RT(RT)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// Dato[ 31 ]
initial
begin
	Dato[31] = 1'b0;
end 
// Dato[ 30 ]
initial
begin
	Dato[30] = 1'b0;
end 
// Dato[ 29 ]
initial
begin
	Dato[29] = 1'b0;
end 
// Dato[ 28 ]
initial
begin
	Dato[28] = 1'b0;
end 
// Dato[ 27 ]
initial
begin
	Dato[27] = 1'b0;
end 
// Dato[ 26 ]
initial
begin
	Dato[26] = 1'b0;
end 
// Dato[ 25 ]
initial
begin
	Dato[25] = 1'b0;
end 
// Dato[ 24 ]
initial
begin
	Dato[24] = 1'b0;
end 
// Dato[ 23 ]
initial
begin
	Dato[23] = 1'b0;
end 
// Dato[ 22 ]
initial
begin
	Dato[22] = 1'b0;
end 
// Dato[ 21 ]
initial
begin
	Dato[21] = 1'b0;
end 
// Dato[ 20 ]
initial
begin
	Dato[20] = 1'b0;
end 
// Dato[ 19 ]
initial
begin
	Dato[19] = 1'b0;
end 
// Dato[ 18 ]
initial
begin
	Dato[18] = 1'b0;
end 
// Dato[ 17 ]
initial
begin
	Dato[17] = 1'b0;
end 
// Dato[ 16 ]
initial
begin
	Dato[16] = 1'b0;
end 
// Dato[ 15 ]
initial
begin
	Dato[15] = 1'b0;
end 
// Dato[ 14 ]
initial
begin
	Dato[14] = 1'b0;
end 
// Dato[ 13 ]
initial
begin
	Dato[13] = 1'b0;
end 
// Dato[ 12 ]
initial
begin
	Dato[12] = 1'b0;
end 
// Dato[ 11 ]
initial
begin
	Dato[11] = 1'b0;
end 
// Dato[ 10 ]
initial
begin
	Dato[10] = 1'b0;
end 
// Dato[ 9 ]
initial
begin
	Dato[9] = 1'b0;
end 
// Dato[ 8 ]
initial
begin
	Dato[8] = 1'b0;
end 
// Dato[ 7 ]
initial
begin
	Dato[7] = 1'b0;
end 
// Dato[ 6 ]
initial
begin
	Dato[6] = 1'b0;
end 
// Dato[ 5 ]
initial
begin
	Dato[5] = 1'b0;
end 
// Dato[ 4 ]
initial
begin
	Dato[4] = 1'b0;
end 
// Dato[ 3 ]
initial
begin
	Dato[3] = 1'b1;
end 
// Dato[ 2 ]
initial
begin
	Dato[2] = 1'b0;
end 
// Dato[ 1 ]
initial
begin
	Dato[1] = 1'b1;
end 
// Dato[ 0 ]
initial
begin
	Dato[0] = 1'b0;
end 
// RD[ 4 ]
initial
begin
	RD[4] = 1'b0;
end 
// RD[ 3 ]
initial
begin
	RD[3] = 1'b0;
end 
// RD[ 2 ]
initial
begin
	RD[2] = 1'b0;
end 
// RD[ 1 ]
initial
begin
	RD[1] = 1'b0;
end 
// RD[ 0 ]
initial
begin
	RD[0] = 1'b1;
end 

// regWriteSignal
initial
begin
	repeat(33)
	begin
		regWriteSignal = 1'b0;
		regWriteSignal = #15000 1'b1;
		# 15000;
	end
	regWriteSignal = 1'b0;
end 
// RS[ 4 ]
initial
begin
	RS[4] = 1'b0;
end 
// RS[ 3 ]
initial
begin
	RS[3] = 1'b0;
end 
// RS[ 2 ]
initial
begin
	RS[2] = 1'b0;
end 
// RS[ 1 ]
initial
begin
	RS[1] = 1'b1;
end 
// RS[ 0 ]
initial
begin
	RS[0] = 1'b0;
end 
// RT[ 4 ]
initial
begin
	RT[4] = 1'b0;
end 
// RT[ 3 ]
initial
begin
	RT[3] = 1'b0;
end 
// RT[ 2 ]
initial
begin
	RT[2] = 1'b0;
end 
// RT[ 1 ]
initial
begin
	RT[1] = 1'b1;
end 
// RT[ 0 ]
initial
begin
	RT[0] = 1'b1;
end 

RegFile_vlg_sample_tst tb_sample (
	.clk(clk),
	.Dato(Dato),
	.RD(RD),
	.regWriteSignal(regWriteSignal),
	.RS(RS),
	.RT(RT),
	.sampler_tx(sampler)
);

RegFile_vlg_check_tst tb_out(
	.regA(regA),
	.regB(regB),
	.sampler_rx(sampler)
);
endmodule

