// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2019 20:37:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SignExtend26
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SignExtend26_vlg_sample_tst(
	x,
	sampler_tx
);
input [25:0] x;
output sampler_tx;

reg sample;
time current_time;
always @(x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SignExtend26_vlg_check_tst (
	res,
	sampler_rx
);
input [31:0] res;
input sampler_rx;

reg [31:0] res_expected;

reg [31:0] res_prev;

reg [31:0] res_expected_prev;

reg [31:0] last_res_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	res_prev = res;
end

// update expected /o prevs

always @(trigger)
begin
	res_expected_prev = res_expected;
end


// expected res[ 31 ]
initial
begin
	res_expected[31] = 1'b0;
end 
// expected res[ 30 ]
initial
begin
	res_expected[30] = 1'b0;
end 
// expected res[ 29 ]
initial
begin
	res_expected[29] = 1'b0;
end 
// expected res[ 28 ]
initial
begin
	res_expected[28] = 1'b0;
end 
// expected res[ 27 ]
initial
begin
	res_expected[27] = 1'b0;
end 
// expected res[ 26 ]
initial
begin
	res_expected[26] = 1'b0;
end 
// expected res[ 25 ]
initial
begin
	res_expected[25] = 1'b0;
end 
// expected res[ 24 ]
initial
begin
	res_expected[24] = 1'b0;
end 
// expected res[ 23 ]
initial
begin
	res_expected[23] = 1'b0;
end 
// expected res[ 22 ]
initial
begin
	res_expected[22] = 1'b0;
end 
// expected res[ 21 ]
initial
begin
	res_expected[21] = 1'b0;
end 
// expected res[ 20 ]
initial
begin
	res_expected[20] = 1'b0;
end 
// expected res[ 19 ]
initial
begin
	res_expected[19] = 1'b0;
end 
// expected res[ 18 ]
initial
begin
	res_expected[18] = 1'b0;
end 
// expected res[ 17 ]
initial
begin
	res_expected[17] = 1'b0;
end 
// expected res[ 16 ]
initial
begin
	res_expected[16] = 1'b0;
end 
// expected res[ 15 ]
initial
begin
	res_expected[15] = 1'b0;
end 
// expected res[ 14 ]
initial
begin
	res_expected[14] = 1'b0;
end 
// expected res[ 13 ]
initial
begin
	res_expected[13] = 1'b0;
end 
// expected res[ 12 ]
initial
begin
	res_expected[12] = 1'b0;
end 
// expected res[ 11 ]
initial
begin
	res_expected[11] = 1'b0;
end 
// expected res[ 10 ]
initial
begin
	res_expected[10] = 1'b0;
end 
// expected res[ 9 ]
initial
begin
	res_expected[9] = 1'b0;
end 
// expected res[ 8 ]
initial
begin
	res_expected[8] = 1'b0;
end 
// expected res[ 7 ]
initial
begin
	res_expected[7] = 1'b0;
end 
// expected res[ 6 ]
initial
begin
	res_expected[6] = 1'b0;
	res_expected[6] = #640000 1'b1;
end 
// expected res[ 5 ]
initial
begin
	res_expected[5] = 1'b0;
	res_expected[5] = #320000 1'b1;
	res_expected[5] = #320000 1'b0;
	res_expected[5] = #320000 1'b1;
end 
// expected res[ 4 ]
initial
begin
	repeat(3)
	begin
		res_expected[4] = 1'b0;
		res_expected[4] = #160000 1'b1;
		# 160000;
	end
	res_expected[4] = 1'b0;
end 
// expected res[ 3 ]
initial
begin
	repeat(6)
	begin
		res_expected[3] = 1'b0;
		res_expected[3] = #80000 1'b1;
		# 80000;
	end
	res_expected[3] = 1'b0;
end 
// expected res[ 2 ]
initial
begin
	repeat(12)
	begin
		res_expected[2] = 1'b0;
		res_expected[2] = #40000 1'b1;
		# 40000;
	end
	res_expected[2] = 1'b0;
end 
// expected res[ 1 ]
always
begin
	res_expected[1] = 1'b0;
	res_expected[1] = #20000 1'b1;
	#20000;
end 
// expected res[ 0 ]
always
begin
	res_expected[0] = 1'b0;
	res_expected[0] = #10000 1'b1;
	#10000;
end 
// generate trigger
always @(res_expected or res)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected res = %b | ",res_expected_prev);
	$display("| real res = %b | ",res_prev);
`endif
	if (
		( res_expected_prev[0] !== 1'bx ) && ( res_prev[0] !== res_expected_prev[0] )
		&& ((res_expected_prev[0] !== last_res_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[0] = res_expected_prev[0];
	end
	if (
		( res_expected_prev[1] !== 1'bx ) && ( res_prev[1] !== res_expected_prev[1] )
		&& ((res_expected_prev[1] !== last_res_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[1] = res_expected_prev[1];
	end
	if (
		( res_expected_prev[2] !== 1'bx ) && ( res_prev[2] !== res_expected_prev[2] )
		&& ((res_expected_prev[2] !== last_res_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[2] = res_expected_prev[2];
	end
	if (
		( res_expected_prev[3] !== 1'bx ) && ( res_prev[3] !== res_expected_prev[3] )
		&& ((res_expected_prev[3] !== last_res_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[3] = res_expected_prev[3];
	end
	if (
		( res_expected_prev[4] !== 1'bx ) && ( res_prev[4] !== res_expected_prev[4] )
		&& ((res_expected_prev[4] !== last_res_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[4] = res_expected_prev[4];
	end
	if (
		( res_expected_prev[5] !== 1'bx ) && ( res_prev[5] !== res_expected_prev[5] )
		&& ((res_expected_prev[5] !== last_res_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[5] = res_expected_prev[5];
	end
	if (
		( res_expected_prev[6] !== 1'bx ) && ( res_prev[6] !== res_expected_prev[6] )
		&& ((res_expected_prev[6] !== last_res_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[6] = res_expected_prev[6];
	end
	if (
		( res_expected_prev[7] !== 1'bx ) && ( res_prev[7] !== res_expected_prev[7] )
		&& ((res_expected_prev[7] !== last_res_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[7] = res_expected_prev[7];
	end
	if (
		( res_expected_prev[8] !== 1'bx ) && ( res_prev[8] !== res_expected_prev[8] )
		&& ((res_expected_prev[8] !== last_res_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[8] = res_expected_prev[8];
	end
	if (
		( res_expected_prev[9] !== 1'bx ) && ( res_prev[9] !== res_expected_prev[9] )
		&& ((res_expected_prev[9] !== last_res_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[9] = res_expected_prev[9];
	end
	if (
		( res_expected_prev[10] !== 1'bx ) && ( res_prev[10] !== res_expected_prev[10] )
		&& ((res_expected_prev[10] !== last_res_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[10] = res_expected_prev[10];
	end
	if (
		( res_expected_prev[11] !== 1'bx ) && ( res_prev[11] !== res_expected_prev[11] )
		&& ((res_expected_prev[11] !== last_res_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[11] = res_expected_prev[11];
	end
	if (
		( res_expected_prev[12] !== 1'bx ) && ( res_prev[12] !== res_expected_prev[12] )
		&& ((res_expected_prev[12] !== last_res_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[12] = res_expected_prev[12];
	end
	if (
		( res_expected_prev[13] !== 1'bx ) && ( res_prev[13] !== res_expected_prev[13] )
		&& ((res_expected_prev[13] !== last_res_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[13] = res_expected_prev[13];
	end
	if (
		( res_expected_prev[14] !== 1'bx ) && ( res_prev[14] !== res_expected_prev[14] )
		&& ((res_expected_prev[14] !== last_res_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[14] = res_expected_prev[14];
	end
	if (
		( res_expected_prev[15] !== 1'bx ) && ( res_prev[15] !== res_expected_prev[15] )
		&& ((res_expected_prev[15] !== last_res_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[15] = res_expected_prev[15];
	end
	if (
		( res_expected_prev[16] !== 1'bx ) && ( res_prev[16] !== res_expected_prev[16] )
		&& ((res_expected_prev[16] !== last_res_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[16] = res_expected_prev[16];
	end
	if (
		( res_expected_prev[17] !== 1'bx ) && ( res_prev[17] !== res_expected_prev[17] )
		&& ((res_expected_prev[17] !== last_res_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[17] = res_expected_prev[17];
	end
	if (
		( res_expected_prev[18] !== 1'bx ) && ( res_prev[18] !== res_expected_prev[18] )
		&& ((res_expected_prev[18] !== last_res_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[18] = res_expected_prev[18];
	end
	if (
		( res_expected_prev[19] !== 1'bx ) && ( res_prev[19] !== res_expected_prev[19] )
		&& ((res_expected_prev[19] !== last_res_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[19] = res_expected_prev[19];
	end
	if (
		( res_expected_prev[20] !== 1'bx ) && ( res_prev[20] !== res_expected_prev[20] )
		&& ((res_expected_prev[20] !== last_res_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[20] = res_expected_prev[20];
	end
	if (
		( res_expected_prev[21] !== 1'bx ) && ( res_prev[21] !== res_expected_prev[21] )
		&& ((res_expected_prev[21] !== last_res_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[21] = res_expected_prev[21];
	end
	if (
		( res_expected_prev[22] !== 1'bx ) && ( res_prev[22] !== res_expected_prev[22] )
		&& ((res_expected_prev[22] !== last_res_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[22] = res_expected_prev[22];
	end
	if (
		( res_expected_prev[23] !== 1'bx ) && ( res_prev[23] !== res_expected_prev[23] )
		&& ((res_expected_prev[23] !== last_res_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[23] = res_expected_prev[23];
	end
	if (
		( res_expected_prev[24] !== 1'bx ) && ( res_prev[24] !== res_expected_prev[24] )
		&& ((res_expected_prev[24] !== last_res_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[24] = res_expected_prev[24];
	end
	if (
		( res_expected_prev[25] !== 1'bx ) && ( res_prev[25] !== res_expected_prev[25] )
		&& ((res_expected_prev[25] !== last_res_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[25] = res_expected_prev[25];
	end
	if (
		( res_expected_prev[26] !== 1'bx ) && ( res_prev[26] !== res_expected_prev[26] )
		&& ((res_expected_prev[26] !== last_res_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[26] = res_expected_prev[26];
	end
	if (
		( res_expected_prev[27] !== 1'bx ) && ( res_prev[27] !== res_expected_prev[27] )
		&& ((res_expected_prev[27] !== last_res_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[27] = res_expected_prev[27];
	end
	if (
		( res_expected_prev[28] !== 1'bx ) && ( res_prev[28] !== res_expected_prev[28] )
		&& ((res_expected_prev[28] !== last_res_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[28] = res_expected_prev[28];
	end
	if (
		( res_expected_prev[29] !== 1'bx ) && ( res_prev[29] !== res_expected_prev[29] )
		&& ((res_expected_prev[29] !== last_res_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[29] = res_expected_prev[29];
	end
	if (
		( res_expected_prev[30] !== 1'bx ) && ( res_prev[30] !== res_expected_prev[30] )
		&& ((res_expected_prev[30] !== last_res_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[30] = res_expected_prev[30];
	end
	if (
		( res_expected_prev[31] !== 1'bx ) && ( res_prev[31] !== res_expected_prev[31] )
		&& ((res_expected_prev[31] !== last_res_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[31] = res_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SignExtend26_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [25:0] x;
// wires                                               
wire [31:0] res;

wire sampler;                             

// assign statements (if any)                          
SignExtend26 i1 (
// port map - connection between master ports and signals/registers   
	.res(res),
	.x(x)
);
// x[ 25 ]
initial
begin
	x[25] = 1'b1;
end 
// x[ 24 ]
initial
begin
	x[24] = 1'b0;
end 
// x[ 23 ]
initial
begin
	x[23] = 1'b0;
end 
// x[ 22 ]
initial
begin
	x[22] = 1'b0;
end 
// x[ 21 ]
initial
begin
	x[21] = 1'b0;
end 
// x[ 20 ]
initial
begin
	x[20] = 1'b0;
end 
// x[ 19 ]
initial
begin
	x[19] = 1'b0;
end 
// x[ 18 ]
initial
begin
	x[18] = 1'b0;
end 
// x[ 17 ]
initial
begin
	x[17] = 1'b0;
end 
// x[ 16 ]
initial
begin
	x[16] = 1'b0;
end 
// x[ 15 ]
initial
begin
	x[15] = 1'b0;
end 
// x[ 14 ]
initial
begin
	x[14] = 1'b0;
end 
// x[ 13 ]
initial
begin
	x[13] = 1'b0;
end 
// x[ 12 ]
initial
begin
	x[12] = 1'b0;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'b0;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'b0;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'b0;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'b0;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b0;
	x[6] = #630000 1'b1;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
	x[5] = #310000 1'b1;
	x[5] = #320000 1'b0;
	x[5] = #320000 1'b1;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
	# 150000;
	repeat(2)
	begin
		x[4] = 1'b1;
		x[4] = #160000 1'b0;
		# 160000;
	end
	x[4] = 1'b1;
	x[4] = #160000 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
	# 70000;
	repeat(5)
	begin
		x[3] = 1'b1;
		x[3] = #80000 1'b0;
		# 80000;
	end
	x[3] = 1'b1;
	x[3] = #80000 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
	# 30000;
	repeat(12)
	begin
		x[2] = 1'b1;
		x[2] = #40000 1'b0;
		# 40000;
	end
	x[2] = 1'b1;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
	# 10000;
	repeat(24)
	begin
		x[1] = 1'b1;
		x[1] = #20000 1'b0;
		# 20000;
	end
	x[1] = 1'b1;
	x[1] = #20000 1'b0;
end 
// x[ 0 ]
always
begin
	x[0] = 1'b1;
	x[0] = #10000 1'b0;
	#10000;
end 

SignExtend26_vlg_sample_tst tb_sample (
	.x(x),
	.sampler_tx(sampler)
);

SignExtend26_vlg_check_tst tb_out(
	.res(res),
	.sampler_rx(sampler)
);
endmodule

